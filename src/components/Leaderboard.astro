<div style="padding: 20px;">
  <h1>Leaderboard</h1>
  <p>Last updated: <span id="last-update"></span></p>
  <p id="status">Loading...</p>

  <div class="leaderboard">
    <div class="leaderboard-header">
      <p>Rank</p>
      <p>Username</p>
      <p>Level</p>
      <p>Experience</p>
      <p>Gold</p>
    </div>

    <div class="leaderboard-content"></div>
  </div>

  <style is:global>
    .leaderboard {
      width: 840px;
      height: 320px;
    }

    .leaderboard-header,
    .leaderboard-content > div {
      display: grid;
      grid-template-columns: 0.4fr 1fr 0.4fr 0.4fr 0.4fr;
    }

    .leaderboard-header {
      border-bottom: 1px solid #000000cc;
    }

    .leaderboard-content {
      height: 320px;
      overflow: auto;
    }

    .leaderboard-content > div {
      border-bottom: 1px solid #00000031;
    }
  </style>
</div>

<script>
  type LeaderboardData = {
    players: PlayerData[];
    lastFetched: number;
  };
  type PlayerData = {
    rank: number;
    username: string;
    level: number;
    xp: number;
    gold: number;
  };

  const lastData = localStorage.getItem('leaderboardData');
  const lastDataParsed = lastData
    ? (JSON.parse(lastData) as LeaderboardData)
    : null;

  let data = lastDataParsed;

  function updateTime() {
    const lastUpdate = document.querySelector(
      '#last-update'
    ) as HTMLSpanElement;
    const lastFetchedDate = new Date(data?.lastFetched || 0);
    const diff = Date.now() - lastFetchedDate.getTime();
    const minutes = Math.floor(diff / 1000 / 60);
    const seconds = Math.floor((diff / 1000) % 60);
    lastUpdate.innerText = `${lastFetchedDate.toLocaleString()} (${minutes}m ${seconds}s ago)`;

    setTimeout(updateTime, 1000);
  }

  function updateStatus() {
    const status = document.querySelector('#status') as HTMLSpanElement;

    if (!navigator.onLine && status.innerText !== 'Offline') {
      status.innerText = 'Offline';
      status.style.color = 'red';
    } else if (
      navigator.onLine &&
      status.innerText !== 'Online (updating every 30s)'
    ) {
      status.innerText = 'Online (updating every 30s)';
      status.style.color = 'green';
    }

    setTimeout(updateStatus, 1000);
  }

  function updateTable() {
    const tbody = document.querySelector(
      '.leaderboard-content'
    ) as HTMLTableSectionElement;
    tbody.innerHTML = '';

    if (!data) return;

    data.players.forEach((player) => {
      const div = document.createElement('div');
      div.innerHTML = [
        player.rank,
        player.username,
        player.level,
        player.xp,
        player.gold,
      ]
        .map((text) => `<p>${text}</p>`)
        .join('');
      tbody.appendChild(div);
    });
  }

  async function fetchLeaderboardData() {
    try {
      const res = await fetch('https://api-game.bloque.app/game/leaderboard');
      const body = (await res.json()) as LeaderboardData;

      const newData = { ...body, lastFetched: Date.now() };

      localStorage.setItem('leaderboardData', JSON.stringify(newData));

      data = newData;
    } catch {}

    updateTable();

    setTimeout(fetchLeaderboardData, 30000);
  }

  updateTable();
  updateTime();
  updateStatus();
  fetchLeaderboardData();
</script>
